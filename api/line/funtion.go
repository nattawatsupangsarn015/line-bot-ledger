package line

import (
	"example/line-bot-ledger/api/public"
	"example/line-bot-ledger/controller"
	"example/line-bot-ledger/model"
	"example/line-bot-ledger/request"
	"example/line-bot-ledger/utils"
	"os"
	"strings"
)

func ReplyUser(line request.LineMessage) (string, error) {
	utils.LogWithTypeStruct(line)
	lineId := line.Events[0].Source.UserID
	findUser, err := controller.GetUserByLineId(lineId)
	if err != nil {
		return "", err
	}

	// rawFileLogin, err := os.Open("stateUserLogin.json")
	// if err != nil {
	// 	return "", err
	// }

	// fileLogin, err := utils.ConvertFileToJson(rawFileLogin)
	// if err != nil {
	// 	return "", err
	// }

	rawFileNoneLogin, err := os.Open("stateUserNoneLogin.json")
	if err != nil {
		return "", err
	}

	fileNoneLogin, err := utils.ConvertFileToJson(rawFileNoneLogin)
	if err != nil {
		return "", err
	}

	var replyText string
	message := line.Events[0].Message
	stateLogin := CheckStateLogin(findUser)

	if message.Type != "text" {
		replyText = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ üôá‚Äç‚ôÇÔ∏è"
	} else if line.Events[0].Type == "follow" {
		replyText = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Rai rub Rai jia (‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢)\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä"
	} else {
		if stateLogin {
			// replyText, isLogout, err := StateUserLogin(message.Text, fileLogin)
		} else {
			replyText, err = StateUserNoneLogin(message.Text, fileNoneLogin, lineId)
			if err != nil {
				return "", err
			}
		}
	}

	text := model.Text{
		Type: "text",
		Text: replyText,
	}

	messageReply := model.ReplyMessage{
		ReplyToken: line.Events[0].ReplyToken,
		Messages: []model.Text{
			text,
		},
	}

	err = utils.ReplyMessageLine(messageReply)
	if err != nil {
		return "", err
	}

	return "OK", nil
}

func StateUserLogin(text string, state interface{}) (string, bool, error) {
	// switch text {
	// case "login":
	// 	return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ \n", true, nil
	// }

	return "", false, nil
}

func StateUserNoneLogin(text string, state model.StateUser, lineId string) (string, error) {
	splitText := strings.Split(text, " ")
	messageText := splitText[0]
	var replyText string

	switch messageText {
	case "login":
		userLogin := request.Login{
			Email:    splitText[1],
			Password: splitText[2],
		}

		rawUser, err := public.LoginUser(userLogin, lineId)
		if err != nil {
			return "", err
		}

		if rawUser == nil {
			replyText = "‡∏ó‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n" + "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \"how-to-register\" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòé"
		} else {
			var user model.User
			err = utils.ConvertInterfaceToStruct(rawUser, &user)
			replyText = "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì " + user.Name + "\n" + "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä\n" + "‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏° \"help\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ"
		}
		break
	case "register":
		userRegister := request.Register{
			Email:    splitText[1],
			Password: splitText[2],
			Name:     splitText[3],
			Phone:    splitText[4],
		}

		_, err := public.CreateUser(userRegister)
		if err != nil {
			return "", err
		}

		replyText = "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ\n" + "‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏° \"how-to-login\""
		break
	case "help":
		var allState []string
		for _, s := range state {
			allState = append(allState, "- "+"\""+s.Type+"\" "+s.Description+"\n")
		}
		joinArr := strings.Join(allState[:], "")
		replyText = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏≠\n" + joinArr
		break
	default:
		findResponse := FindState(state, text)
		if findResponse == "" {
			findResponse = "‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üôá‚Äç‚ôÇÔ∏è\n‡∏û‡∏¥‡∏° \"help\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ"
		}
		replyText = findResponse
	}

	return replyText, nil
}

func CheckStateLogin(user interface{}) bool {
	if user != nil {
		return true
	} else {
		return false
	}
}

func FindState(data model.StateUser, text string) string {
	for i := range data {
		if data[i].Type == text {
			return data[i].Response
		}
	}
	return ""
}
